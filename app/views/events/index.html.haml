- model_class = Event
= page_header t('.title', default: model_class.model_name.human.pluralize)

%div{:'ng-controller' => :EventIndexCtrl}
  %table.table.table-striped
    %thead
      %tr
        %th= model_class.human_attribute_name :name
        %th= model_class.human_attribute_name :identifier
        %th= model_class.human_attribute_name :opens_at
        %th= model_class.human_attribute_name :closes_at
        %th= model_class.human_attribute_name :subscriptions
        %th
    %tbody
      - @events.each do |event|
        %tr
          %td= link_to abbr(event.name, size: 35).html_safe, event
          %td= link_to abbr(event.identifier).html_safe, present_event_main_page_path(event.identifier)
          %td= abbr l(event.opens_at), abbr: l(event.opens_at, format: :short), ending: nil if event.opens_at
          %td= abbr l(event.closes_at), abbr: l(event.closes_at, format: :short), ending: nil if event.closes_at
          - if can? :index, Subscription
            %td= link_to event.subscriptions.size, event_subscriptions_path(event)
          - else
            %td= event.subscriptions.size
          %td.text-right
            = minilink_to_edit event, edit_event_path(event)
            = minilink_to_destroy event, value: event.name
            = link_to icon_tag('icon-file'), event_pages_path(event),
                class: 'btn btn-xs btn-primary',
                title: Page.model_name.human.pluralize if can? :index, Page
            = link_to icon_tag('icon-tasks'), '#copy_fields',
                class: 'btn btn-xs btn-success', :'data-toggle' => "modal",
                title: '', :'ng-click' => "copyFrom(#{event.to_json(only: [:id, :name])})"
            = link_to icon_tag('icon-envelope'), new_event_notification_path(event),
                class: 'btn btn-xs btn-info', title: t(:send_email),
                id: "#event_#{event.id}_notify_link" if can? :create, event.notifications.build

  = simple_form_for OpenStruct.new, as: 'copy', method: :put, wrapper: :horizontal,
      url: copy_fields_events_path, html: { class: 'form-horizontal' } do |f|
    = modal_dialog id: :copy_fields do
      = modal_header do
        = modal_close
        %h3= t(:copy_fields)
      = modal_body do
        = f.input :from_event_name, label: t(:from), input_html: { autocomplete: "off",
            :'ng-model' => 'fromEvent',
            typeahead: "event as event.name for event in ahead($viewValue, '#{ahead_events_path}')" }
        = f.input_field :from_event_id, as: :hidden, value: '{{ fromEvent.id }}'
        = f.input :to_event_name, label: t(:to), input_html: { autocomplete: "off",
            :'ng-model' => 'toEvent',
            typeahead: "event as event.name for event in ahead($viewValue, '#{ahead_events_path}')" }
        = f.input_field :to_event_id, as: :hidden, value: '{{ toEvent.id }}'
        %p.text-muted
          Esta operação duplicará os campos de um evento para o outro. Nenhum
          campo já presente no evento de destino será removido.
      = modal_footer do
        = modal_cancel caption: t(:'helpers.links.cancel')
        = f.button :submit, t(:'copy_fields'), class: 'btn-success'

.row
  .col-sm-6
    = paginate @events
  .col-sm-6.text-right
    = link_to 'Todos os inscritos', subscriptions_path if can? :read, Subscription


%br

= link_to_add Event, new_event_path
